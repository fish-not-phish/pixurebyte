services:
  backend:
    image: pixurebyte-backend
    container_name: pixurebyte_backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pixurebyte-backend.rule=Host(`pixurebyte.my-domain.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.pixurebyte-backend.entrypoints=websecure"
      - "traefik.http.routers.pixurebyte-backend.tls=true"
      - "traefik.http.routers.pixurebyte-backend.tls.certresolver=cloudflare" # change DNS provider as needed
      - "traefik.http.routers.pixurebyte-backend.service=pixurebyte-backend-service"
      - "traefik.http.services.pixurebyte-backend-service.loadbalancer.server.port=8000"

  db:
    image: postgres:16
    container_name: pixurebyte_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: pixurebytedb
      POSTGRES_USER: pixurebyte
      POSTGRES_PASSWORD: pixurebyte_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]

  frontend:
    image: pixurebyte-frontend
    container_name: pixurebyte_frontend
    restart: always
    environment:
      NODE_ENV: "production"
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pixurebyte-frontend.rule=Host(`pixurebyte.my-domain.com`)"
      - "traefik.http.routers.pixurebyte-frontend.entrypoints=websecure"
      - "traefik.http.routers.pixurebyte-frontend.tls=true"
      - "traefik.http.routers.pixurebyte-frontend.tls.certresolver=cloudflare" # change DNS provider as needed
      - "traefik.http.routers.pixurebyte-frontend.service=pixurebyte-frontend-service"
      - "traefik.http.services.pixurebyte-frontend-service.loadbalancer.server.port=3000"

volumes:
  postgres_data:
  redis_data: