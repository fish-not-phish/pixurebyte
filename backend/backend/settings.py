"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
import re
import base64

def str_to_bool(val):
    val = str(val).strip().lower()
    return val in ('true', '1', 'yes')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DOT_ENV_PATH = BASE_DIR / ".env"

if DOT_ENV_PATH.exists():
    load_dotenv(DOT_ENV_PATH)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str_to_bool(os.environ.get('DEBUG', 'False'))

raw_hosts = os.environ['ALLOWED_HOSTS']

if raw_hosts.strip():
    ALLOWED_HOSTS = raw_hosts.split(',') + [
        '127.0.0.1', 'localhost', '0.0.0.0', 'django', 'host.docker.internal'
    ]
else:
    ALLOWED_HOSTS = [
        '127.0.0.1', 'localhost', '0.0.0.0', 'django', 'host.docker.internal'
    ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "ninja",

    "users",
    "scans",

    "corsheaders",
    "ninja_jwt",
    'ninja_extra',
    'django_celery_beat',
    'django_celery_results',
]

CUSTOM_DOMAIN = os.environ['CUSTOM_DOMAIN']

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST', 'db'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CELERY_BROKER_URL = os.environ['REDIS_URL']
# CELERY_BROKER_REDIS_URL= os.environ['REDIS_URL']

CELERY_BROKER_URL = "redis://10.0.10.56:6379/0"
CELERY_BROKER_REDIS_URL= "redis://10.0.10.56:6379/0"

CELERY_RESULT_BACKEND = "django-db"
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_RESULTS_EXTENDED = True

DATA_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024

NINJA_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGIN_REGEXES = [
    rf"^https://[a-z0-9-]+\.{re.escape(CUSTOM_DOMAIN)}(:[0-9]+)?$",  
    rf"^https://{re.escape(CUSTOM_DOMAIN)}(:[0-9]+)?$",              
    rf'^https://{re.escape(CUSTOM_DOMAIN)}$',
    rf"^http://[a-z0-9-]+\.{re.escape(CUSTOM_DOMAIN)}(:[0-9]+)?$",  
    rf"^http://{re.escape(CUSTOM_DOMAIN)}(:[0-9]+)?$",              
    rf'^http://{re.escape(CUSTOM_DOMAIN)}$',
]

AUTH_USER_MODEL = "users.User"

AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
AWS_DEFAULT_REGION = os.environ['AWS_DEFAULT_REGION']

AWS_MEDIA_BUCKET_NAME = os.environ['S3_BUCKET_NAME']
AWS_S3_REGION_NAME = os.environ['AWS_DEFAULT_REGION']

CF_MEDIA_DOMAIN = '%s.s3.amazonaws.com' % AWS_MEDIA_BUCKET_NAME

AWS_S3_MEDIA_DOMAIN = os.environ['CLOUDFRONT_DOMAIN']

MEDIA_URL = f'https://{AWS_S3_MEDIA_DOMAIN}/'

AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_EXPIRE = 300 

# key_path = Path(BASE_DIR / "cloudfront_key.pem")
# with open(key_path, 'r') as key_file:
#     AWS_CLOUDFRONT_KEY = key_file.read()

# AWS_CLOUDFRONT_KEY_ID = os.environ['AWS_CLOUDFRONT_KEY_ID']

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "bucket_name": AWS_MEDIA_BUCKET_NAME,
            "region_name": AWS_S3_REGION_NAME,
            "custom_domain": AWS_S3_MEDIA_DOMAIN,
            "file_overwrite": False,
            "default_acl": "public-read", # private for signed urls
            "querystring_auth": False, # True for signed urls
            "object_parameters": {
                "CacheControl": "private, max-age=300, immutable", # remove immutable for signed urls

            },
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_AGE = 1209600

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_PRELOAD = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

PUBLIC_SUBNET_ID = os.environ['PUBLIC_SUBNET_ID']
SECURITY_GROUP_ID = os.environ['SECURITY_GROUP_ID']
ECS_CLUSTER_NAME = os.environ['ECS_CLUSTER_NAME']
TASK_DEFINITION_ARN = os.environ['TASK_DEFINITION_ARN']
S3_BUCKET_NAME = os.environ['S3_BUCKET_NAME']